[{"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/index.js":"1","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/App.js":"2","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AllClassSection.js":"3","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/NavBar.js":"4","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/LogIn.js":"5","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AddClassSectionForm.js":"6","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/addClassForm.js":"7","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/ChangePwd.js":"8","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/students/ManageStudent.js":"9","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/ClassRoom.js":"10","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/PrintResult.js":"11","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/GotoClass.js":"12","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/subjects/ManageSubject.js":"13","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AllClasses.js":"14","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultsGenerator.js":"15","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/subjects/SubjectTable.js":"16","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultClassBased.js":"17","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/ScoreSheetTables.js":"18","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/AddingCard.js":"19","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/services.js":"20","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/CardList.js":"21","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/AddingMoreCard.js":"22","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/ManageCard.js":"23","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/db.js":"24","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/Results.js":"25","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/reusables/Loading.js":"26","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/Card.js":"27","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultTables.js":"28","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultData.js":"29","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/globalStore.js":"30","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/rootReducer.js":"31","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/types.js":"32","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/SignUp.js":"33","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/actions/UserActions.js":"34","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/firebase.js":"35","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/firebase/FirebaseConfig.js":"36","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/LoadScreen.js":"37"},{"size":411,"mtime":1626346666443,"results":"38","hashOfConfig":"39"},{"size":2215,"mtime":1626347268355,"results":"40","hashOfConfig":"39"},{"size":2239,"mtime":1621009231661,"results":"41","hashOfConfig":"39"},{"size":3502,"mtime":1621805163633,"results":"42","hashOfConfig":"39"},{"size":3190,"mtime":1626358346503,"results":"43","hashOfConfig":"39"},{"size":5448,"mtime":1621805789686,"results":"44","hashOfConfig":"39"},{"size":6568,"mtime":1621805764690,"results":"45","hashOfConfig":"39"},{"size":3069,"mtime":1621805198348,"results":"46","hashOfConfig":"39"},{"size":6363,"mtime":1621805800997,"results":"47","hashOfConfig":"39"},{"size":3845,"mtime":1621805641096,"results":"48","hashOfConfig":"39"},{"size":1137,"mtime":1621805284428,"results":"49","hashOfConfig":"39"},{"size":2651,"mtime":1621805691342,"results":"50","hashOfConfig":"39"},{"size":3467,"mtime":1621805853022,"results":"51","hashOfConfig":"39"},{"size":2315,"mtime":1621805255473,"results":"52","hashOfConfig":"39"},{"size":5020,"mtime":1621814498506,"results":"53","hashOfConfig":"39"},{"size":2275,"mtime":1621805561449,"results":"54","hashOfConfig":"39"},{"size":202,"mtime":1621682335134,"results":"55","hashOfConfig":"39"},{"size":5425,"mtime":1620828456056,"results":"56","hashOfConfig":"39"},{"size":3167,"mtime":1620828456044,"results":"57","hashOfConfig":"39"},{"size":17348,"mtime":1626354479800,"results":"58","hashOfConfig":"39"},{"size":1038,"mtime":1620828456048,"results":"59","hashOfConfig":"39"},{"size":2167,"mtime":1620828456048,"results":"60","hashOfConfig":"39"},{"size":2207,"mtime":1621007893559,"results":"61","hashOfConfig":"39"},{"size":324,"mtime":1620828499098,"results":"62","hashOfConfig":"39"},{"size":6030,"mtime":1621814766469,"results":"63","hashOfConfig":"39"},{"size":200,"mtime":1620828456192,"results":"64","hashOfConfig":"39"},{"size":2185,"mtime":1620828456048,"results":"65","hashOfConfig":"39"},{"size":13004,"mtime":1621805322176,"results":"66","hashOfConfig":"39"},{"size":1171,"mtime":1620828456116,"results":"67","hashOfConfig":"39"},{"size":522,"mtime":1626346542668,"results":"68","hashOfConfig":"39"},{"size":612,"mtime":1626346458997,"results":"69","hashOfConfig":"39"},{"size":308,"mtime":1626345650099,"results":"70","hashOfConfig":"39"},{"size":3633,"mtime":1626353571719,"results":"71","hashOfConfig":"39"},{"size":4657,"mtime":1626357683607,"results":"72","hashOfConfig":"39"},{"size":886,"mtime":1626347904062,"results":"73","hashOfConfig":"39"},{"size":1064,"mtime":1626357091094,"results":"74","hashOfConfig":"39"},{"size":548,"mtime":1626357933309,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1uewlyt",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/index.js",[],["165","166"],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/App.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AllClassSection.js",["167"],"import React, { useEffect, useState } from 'react'\n\nimport AddingMoreCard from '../cards/AddingMoreCard';\n\nimport CardList from '../cards/CardList'\nimport AddingCard from '../cards/AddingCard'\n\nimport { dbServices } from '../../services/services';\n\nfunction AllClassSection() {\n    /**\n     * 1.   useEffect = fetch all class category and keep in useState = ClassSection \n     * 2.   if ClassSection.length === 0 ? display addClassSection component\n     * 3.   if ClassSection.length !== 0 ? display ClassSectionList components\n     * 4.   if any card in ClassSectionList component is clicked? window.location = '/allClass' with props of ClassSectionId\n     *  */\n\n    const [ClassSection, setClassSection] = useState([])\n\n    useEffect(() => {\n        //* 1.   useEffect = fetch all class category\n        dbServices.fetchAllSections(setClassSection, ClassSection)\n\n    }, [])\n    return (\n        <div>\n\n\n            <div className='d-flex justify-content-center'>\n                {\n                    ClassSection.length === 0 ?\n                        <div>\n                            <h4 className='text-success text-center mb-3 font-weight-bold'>\n                                <em>\n                                    SORRY YOU HAVE NO SECTION AVAILABLE. <br />PLEASE CLICK THE BUTTON BELOW TO ADD SECTION\n                                </em>\n                            </h4>\n                            <AddingCard addtype='section' />\n                        </div>\n                        :\n                        // ClassSection.length === 0 ?\n                        //     <Loading /> :\n                        ClassSection.length !== 0 &&\n                        <div className='d-flex flex-column flex-wrap'>\n                            <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >AVAILABLE SECTIONS</h4>\n\n                            <div className='d-flex flex-row flex-wrap'>\n                                <CardList ClassSection={ClassSection} />\n                                <AddingMoreCard addtype='section' />\n                            </div>\n                        </div>\n\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default AllClassSection\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/NavBar.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/LogIn.js",["168","169","170"],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AddClassSectionForm.js",["171"],"import React, { useState, useEffect } from 'react';\nimport { Table, Card, Form, Label, Input, Button, FormGroup } from 'reactstrap';\n\nimport { dbServices } from '../../services/services';\n\n\n\n\n\nfunction AddclassCategoryForm() {\n\n    const [ClassSection, setClassSection] = useState([])\n    const [Section, setSection] = React.useState({ cat_name: '', hod_name: '', })\n\n    useEffect(() => {\n        //fetchAllSection\n        dbServices.fetchAllSections(setClassSection, ClassSection)\n\n    }, [])\n\n\n\n    const changeHandler = (e) => {\n        const value = e.target.value;\n        const upperCaseValue = value.toLocaleUpperCase()\n        setSection({\n            ...Section,\n            [e.target.name]: upperCaseValue\n        })\n\n    }\n    const AddSectionHandler = () => {\n        if (Section.cat_name === '' | Section.hod_name === '') {\n            alert(`\"Section Name\" or \"Head of Section\" cannot be empty `)\n        }\n\n        if (ClassSection.length === 0 & !(Section.cat_name === '' | !Section.hod_name === '')) {\n            console.log(Section)\n            setClassSection(ClassSection.concat(Section))\n        }\n        if (ClassSection.length !== 0) {\n            let checkConflictArray1 = ClassSection.filter(section => section.cat_name === Section.cat_name)\n            if (checkConflictArray1.length === 0) {\n                setClassSection(ClassSection.concat(Section))\n            }\n            else {\n                console.log({ checkConflictArray1 })\n                alert(`${Section.cat_name} section already added`)\n            }\n        }\n    }\n\n\n    const DeleteHandler = (e) => {\n        const currentIndex = e.target.id\n\n        let newAllSection = [...ClassSection];\n        newAllSection.splice(currentIndex, 1)\n        setClassSection(newAllSection)\n\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if (ClassSection.length === 0) {\n            alert(`Atleast one section must be must added`)\n        }\n\n        else {\n            //save all sections to DB\n            dbServices.saveAllSection(ClassSection)\n        }\n\n\n\n    }\n\n    return (\n        <div className='d-flex flex-row' >\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >Register Section(s) Below</h4>\n                <Card className='container shadow-lg p-3 mb-5 d-flex'>\n                    <Form className='d-flex   flex-column '>\n                        <FormGroup className='d-flex flex-row mr-0 justify-content-start'>\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Section Name:</Label>\n                            <Input type=\"text\" name=\"cat_name\" value={Section.cat_name} onChange={changeHandler} placeholder=\"e.g: Nursery, Basic, JSS, SSS\" />\n                        </FormGroup >\n                        <FormGroup className='d-flex flex-row ' >\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Head of Section:</Label>\n                            <Input type=\"text\" name=\"hod_name\" value={Section.hod_name} onChange={changeHandler} placeholder=\"e.g Ustaz Zulqarnain\" />\n                        </FormGroup>\n                    </Form>\n                    <div className='d-flex align-self-center justify-content-lg-center '>\n                        <Button className='text-light font-weight-bold'\n                            color='success'\n                            onClick={AddSectionHandler}>Add Section</Button>\n                    </div>\n                </Card>\n                <Table className='text-success' bordered hover striped>\n                    <thead>\n                        <tr>\n\n                            <th>Section Name</th>\n                            <th>HOD Name</th>\n                            <th>Number of Classes Registered</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            ClassSection.length !== 0 &&\n                            ClassSection.map((section, index) => {\n                                return (\n                                    < tr key={index}>\n                                        <td>{section.cat_name}</td>\n                                        <td>{section.hod_name}</td>\n                                        <td>0</td>\n                                        <td >\n                                            <Button\n                                                id={index}\n                                                onClick={DeleteHandler}\n                                                className='ml-2 text-light bg-success font-weight-bold'>Delete</Button>\n\n                                        </td>\n                                    </tr>\n                                )\n                            })\n\n\n\n\n                        }\n                    </tbody>\n                </Table>\n\n\n\n                <div className='d-flex align-self-center justify-content-lg-center '>\n                    <Button className='text-light font-weight-bold'\n                        color='success'\n                        onClick={onSubmit}>Submit</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddclassCategoryForm\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/addClassForm.js",["172"],"import React, { useState, useEffect } from 'react';\nimport { Table, Card, Form, Label, Input, Button, FormGroup } from 'reactstrap';\nimport { dbServices } from '../../services/services';\n\n\n\n\nfunction AddclassClassesForm(props) {\n    const sectionName = props.match.params.sectionname.toLocaleLowerCase()\n    console.log(sectionName)\n    const [Classes, setClasses] = useState([])\n    const [myClass, setmyClass] = useState({ class_name: '', teacher_name: '', })\n\n    useEffect(() => {\n        //fetchAllClassess\n        dbServices.fetchAllClasses(sectionName, setClasses, Classes)\n    }, [])\n\n    const changeHandler = (e) => {\n        const value = e.target.value;\n        const upperCaseValue = value.toLocaleUpperCase()\n        setmyClass({\n            ...myClass,\n            [e.target.name]: upperCaseValue\n        })\n\n    }\n    const AddmyClassHandler = () => {\n        if (myClass.class_name === '' | myClass.teacher_name === '') {\n            alert(`\"Class Name\" or \"Class Teacher's Name\" cannot be empty `)\n        }\n        else {\n\n            let checkConflictArray = Classes.filter(Class => Class.class_name === myClass.class_name)\n\n            if (checkConflictArray.length === 0) {\n                setClasses(Classes.concat(myClass))\n            }\n            else {\n                console.log({ checkConflictArray })\n                alert(`${myClass.class_name} class already added`)\n            }\n        }\n    }\n    // const EditHandler = (e) => {\n    //     const currentIndex = e.target.id\n\n    //     let tempStateData = [...Classes] //Create a dummy array variable to hold Classes \n    //     setmyClass(tempStateData[currentIndex])\n    //     db.get(sectionName)\n    //         .then(doc => {\n    //             db.put({\n    //                 _id: sectionName,\n    //                 _rev: doc._rev,\n    //                 Classes: Classes,\n    //                 no_of_classes: 0\n    //             }).then(result => {\n\n    //                 // setClasses(tempStateData)\n    //                 //settextChange(!textChange) //this is use to update state(causes change to DOM) so a re-render occur\n    //                 //setClasses(Classes.concat(myClass))\n    //             })\n    //         })\n    // }\n    const DeleteHandler = (e) => {\n        const currentIndex = e.target.id\n        let newClasses = [...Classes];\n        newClasses.splice(currentIndex, 1)\n        setClasses(newClasses)\n\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        if (Classes.length === 0) {\n            alert(`Atleast one myClass must be must added`)\n        }\n        else {\n            //saveClasses to DB\n            dbServices.saveClasses(sectionName, Classes)\n        }\n    }\n\n    return (\n        <div className='d-flex flex-row' >\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n\n                <h4 className='justify-self-center text-center text-success mt-4 font-weight-bold' > {sectionName.toLocaleUpperCase()} SECTION</h4>\n\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >Register Class(es)</h4>\n                <Card className='container shadow-lg p-3 mb-5 d-flex'>\n                    <Form className='d-flex   flex-column '>\n                        <FormGroup className='d-flex flex-row mr-0 justify-content-start'>\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Class Name:</Label>\n                            <Input type=\"text\" name=\"class_name\" value={myClass.class_name} onChange={changeHandler} placeholder=\"e.g: Nursery 1, Basic 2, JSS 3, SSS 1 \" />\n                        </FormGroup >\n                        <FormGroup className='d-flex flex-row ' >\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Class Teacher Name:</Label>\n                            <Input type=\"text\" name=\"teacher_name\" value={myClass.teacher_name} onChange={changeHandler} placeholder=\"e.g Ustaz Zulqarnain\" />\n                        </FormGroup>\n                    </Form>\n                    <div className='d-flex align-self-center justify-content-lg-center '>\n                        <Button className='text-light font-weight-bold'\n                            color='success'\n                            onClick={AddmyClassHandler}>Add Class</Button>\n                    </div>\n                </Card>\n\n\n                <Table className='text-success' bordered hover striped>\n                    <thead>\n                        <tr>\n\n                            <th>Class Name</th>\n                            <th>Class Teacher Name</th>\n                            <th>Number of Subjects Registered</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Classes.map((myClass, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td>{myClass.class_name}</td>\n                                    <td>{myClass.teacher_name}</td>\n                                    <td>0</td>\n                                    <td >\n                                        {/* <Button className='ml-2 text-light bg-success font-weight-bold'\n                                            id={index}\n                                            onClick={EditHandler}\n                                        >\n                                            Edit\n                                        </Button> */}\n                                        <Button className='ml-2 text-light bg-success font-weight-bold'\n                                            id={index}\n                                            onClick={DeleteHandler}\n                                        >\n                                            Delete\n                                        </Button>\n\n\n                                    </td>\n                                </tr>\n                            )\n                        })\n\n                        }\n                    </tbody>\n                </Table>\n                <div className='d-flex align-self-center justify-content-lg-center '>\n                    <Button className='text-light font-weight-bold'\n                        color='success'\n                        onClick={onSubmit}>Submit</Button>\n                </div>\n            </div>\n\n        </div>\n\n\n\n    )\n}\n\nexport default AddclassClassesForm\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/ChangePwd.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/students/ManageStudent.js",["173"],"import React, { useState, useEffect } from 'react';\nimport { Table, Card, Form, Label, Input, Button, FormGroup } from 'reactstrap';\n\nimport { dbServices } from '../../services/services';\n\n\nfunction ManageStudent(props) {\n    const ClassName = props.match.params.ClassRoomName.toLocaleLowerCase()\n\n    const gender = ['MALE', 'FEMALE']\n    const [AllmyStudent, setAllmyStudent] = useState([])\n    //const [studentInScores, setstudentInScores] = useState({})\n    const [myStudent, setmyStudent] = useState({ fName: '', sName: '', gender: gender[0] })\n\n    const [Scores, setScore] = useState(null)\n\n    useEffect(() => {\n        //fetch All Students\n        dbServices.getStudentsAndScore(ClassName, setAllmyStudent, AllmyStudent, setScore)\n\n    }, [])\n\n\n    const changeHandler = (e) => {\n        const value = e.target.value;\n        const upperCaseValue = value.toLocaleUpperCase()\n        setmyStudent({\n            ...myStudent,\n            [e.target.name]: upperCaseValue\n        })\n\n\n    }\n    const AddmyStudentHandler = () => {\n        if (myStudent.fName === '' || myStudent.sName === '') {\n            alert(`\"Student First Name\" or \"Student Surname\" cannot be empty `)\n        }\n        else {\n\n            let checkConflictArray = AllmyStudent.filter(students => students.fName === myStudent.fName && students.sName === myStudent.sName)\n            if (checkConflictArray.length === 0) {\n                setAllmyStudent(AllmyStudent.concat(myStudent))\n            }\n            else {\n                alert(`${myStudent.fName} ${myStudent.sName} already added`)\n            }\n        }\n    }\n\n    const DeleteHandler = (e) => {\n        const currentIndex = e.target.id\n        let newAllmyStudent = [...AllmyStudent];\n        newAllmyStudent.splice(currentIndex, 1)\n        setAllmyStudent(newAllmyStudent)\n\n        if (Scores) {\n            for (const key in Scores) {\n                if (Scores.hasOwnProperty.call(Scores, key)) {\n                    Scores[key].splice(currentIndex, 1);\n                }\n            }\n            setScore(Scores)\n            dbServices.deleteStudentfromScore(ClassName, Scores)\n        }\n\n\n\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        if (AllmyStudent.length === 0) {\n            alert(`No Student added`)\n\n        }\n\n        else {\n            //Save Students to DB\n            dbServices.saveStudents(ClassName, AllmyStudent)\n        }\n    }\n\n    return (\n        <div className='d-flex flex-row' >\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >{ClassName.toLocaleUpperCase()}</h4>\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >Register Student(s) Below</h4>\n                <Card className='container shadow-lg p-3 mb-5 d-flex'>\n                    <Form className='d-flex   flex-column '>\n                        <FormGroup className='d-flex flex-row mr-0 justify-content-start'>\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Student First Name:</Label>\n                            <Input type=\"text\" name=\"fName\" value={myStudent.fName} onChange={changeHandler} placeholder=\"e.g: Student First Name\" />\n                        </FormGroup >\n                        <FormGroup className='d-flex flex-row mr-0 justify-content-start'>\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Student Surname Name:</Label>\n                            <Input type=\"text\" name=\"sName\" value={myStudent.sName} onChange={changeHandler} placeholder=\"e.g: Student Surname\" />\n                        </FormGroup >\n                        <FormGroup className='d-flex flex-row ' >\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Gender</Label>\n                            <Input type=\"select\" name='gender' value={myStudent.sGender} onChange={changeHandler} >\n                                {gender.map((state, index) => (\n                                    <option key={index}>{state}</option>\n                                ))\n                                }\n                            </Input>\n                        </FormGroup>\n                    </Form>\n                    <div className='d-flex align-self-center justify-content-lg-center '>\n                        <Button className='text-light font-weight-bold'\n                            color='success'\n                            onClick={AddmyStudentHandler}>Add Student</Button>\n                    </div>\n                </Card>\n                <Table className='text-success' bordered hover striped>\n                    <thead>\n                        <tr>\n\n                            <th>Student Name</th>\n                            <th>Gender</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n\n                            AllmyStudent.map((myStudent, index) => {\n                                return (\n                                    < tr key={index}>\n                                        <td>{myStudent.fName} {myStudent.sName}</td>\n\n                                        <td>{myStudent.gender}</td>\n                                        <td >\n                                            <Button\n                                                id={index}\n                                                onClick={DeleteHandler}\n                                                className='ml-2 text-light bg-success font-weight-bold'>Delete</Button>\n\n                                        </td>\n                                    </tr>\n                                )\n                            })\n\n                        }\n                    </tbody>\n                </Table>\n\n\n\n                <div className='d-flex align-self-center justify-content-lg-center '>\n                    <Button className='text-light font-weight-bold'\n                        color='success'\n                        onClick={onSubmit}>Submit</Button>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default ManageStudent\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/ClassRoom.js",["174"],"import React, { useState, useEffect } from 'react'\nimport ManageCard from '../cards/ManageCard'\nimport { Label, Input } from 'reactstrap';\nimport ScoreSheetTable from './ScoreSheetTables';\nimport { dbServices } from '../../services/services';\n\nfunction ClassRoom(props) {\n    const subjectName = props.match.params.subjectName\n\n    let ClassName = props.match.params.myClassName.toLocaleLowerCase()\n    const [students, setstudents] = useState([])\n    const [allSubjects, setAllSubject] = useState({ subjects: [], })\n\n    const [scoreDisplayData, setScore] = useState({})\n\n    useEffect(() => {\n\n        //fetch All subjects and scores for subject\n        dbServices.fetchStudentsAndSubjectsAnsScores(ClassName, setstudents, setAllSubject, setScore, allSubjects)\n\n        if (subjectName) {\n            alert('ERROR OCCURED!\\n \\nPlease ensure to enter ' + subjectName + ' score for each student')\n        }\n    }, [])\n\n    const subjectChangeHandler = (e) => {\n        const value = e.target.value;\n        const upperCaseValue = value.toLocaleUpperCase()\n        setAllSubject({\n            ...allSubjects,\n            currentSubject: upperCaseValue\n        })\n    }\n    return (\n        <div className='d-flex'>\n\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n\n                <h4 className='text-danger font-weight-bold' >\n                    {ClassName.toLocaleUpperCase()}</h4>\n\n                {/* Display the Manage Cards for Students and Subjects */}\n\n                <ManageCard currentClass={ClassName} NoOfSubjects={allSubjects.subjects.length}\n                    NoOfStudents={students.length} student='managestudents' subject='managesubjects' />\n\n                <div>\n                    {/* Dropdown options for Subjects */}\n                    {\n                        // Display this message if no Subject and Student Availabe for the Class\n                        allSubjects.subjects.length === 0 || students.length === 0 ?\n                            <h6 className='text-danger font-weight-bold' >\n                                <em>You have either no 'Subject' or 'Student' registered for this class.\n                                    <br />Please use  the buttons above to add Subjects and Students\n                                </em></h6>\n                            :\n                            // the subjects Option drop\n                            < div >\n                                <h4 className='text-success text-center font-weight-bold' >Scoresheet for\n                                        <i className='text-danger'>{allSubjects.currentSubject}</i></h4>\n                                <div className='d-flex'>\n                                    < Label for=\"exampleSelect\">Change Subject:</Label>\n                                    <Input type=\"select\" name=\"currentSubject\" value={allSubjects.currentSubject}\n                                        onChange={subjectChangeHandler} >\n                                        {\n                                            allSubjects.subjects.map((state, index) => (\n                                                <option key={index} value={state.subjectName}>{state.subjectName}</option>\n                                            ))\n                                        }\n                                    </Input>\n                                </div>\n                            </div>\n                    }\n\n                </div>\n                {\n                    // students.length !== 0 &&\n                    < ScoreSheetTable ClassName={ClassName} students={students} scoreDisplayData={scoreDisplayData.score}\n                        currentSubject={allSubjects.currentSubject} />\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default ClassRoom\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/PrintResult.js",["175"],"import React, { useRef } from 'react'\n//import Results from './Results';\nimport ResultClassBased from './ResultClassBased'\nimport { useReactToPrint } from 'react-to-print';\nimport { Button } from 'reactstrap';\n\nfunction PrintResult() {\n    const [buttonDisplay, setbtnDisplay] = React.useState({ display: 'flex' })\n    const componentRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    const backHandler = () => {\n\n        window.location = '/resultsgenerator'\n    }\n\n    return (\n        <div>\n            < div className='mb-5 mt-5 align-self-center justify-content-lg-center' style={buttonDisplay}>\n                <Button className='mr-4 text-light font-weight-bold'\n                    color='success'\n                    onClick={backHandler}>BACK</Button>\n                <Button className='text-light font-weight-bold'\n                    color='success'\n                    onClick={handlePrint}>PRINT</Button>\n            </div >\n            <ResultClassBased ref={componentRef} style={{ buttonDisplay }} />\n        </div>\n\n    );\n};\n\n\n\nexport default PrintResult","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/GotoClass.js",["176"],"import React, { useEffect, useState } from 'react'\nimport { Card, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\n\n//DATEPICKER AND ITS CSS\nimport { dbServices } from '../../services/services';\n\n\nfunction ResultsGenerator() {\n\n    const [ResultGenData, setResultGenData] = useState({\n        class: [],\n        selectedClass: ''\n    })\n\n    useEffect(() => {\n        let tempClassValue = []\n        dbServices.getResultGeneratorData(ResultGenData, setResultGenData, tempClassValue)\n    }, [])\n\n    const handleChange = (e) => {\n        const value = e.target.value\n        console.log(value)\n        setResultGenData({\n            ...ResultGenData,\n            [e.target.name]: value\n        })\n    }\n    console.log(ResultGenData)\n    const onSubmit = (e) => {\n        e.preventDefault()\n        // const Data = {\n        //     term: ResultGenData.term,\n        //     selectedClass: ResultGenData.selectedClass,\n        //     session: ResultGenData.session,\n        //     nextTermBeing: ResultGenData.nextTermBeing.toDateString()\n        // }\n\n        window.location = `${ResultGenData.selectedClass.toLocaleLowerCase()}/classroom`\n\n    }\n    return (\n        <div >\n\n            <div className='d-flex justify-content-center align-items-center flex-column'>\n\n\n                <Card className='container border w-50 shadow-lg p-3 d-flex align-items-center'>\n                    <h4 className='text-danger mb-5 text-center font-weight-bold' > SPECIFY A DESIRED CLASS</h4>\n                    <Form >\n                        <FormGroup className='d-flex w-100' >\n                            <Label for=\"Class\" className='text-success font-weight-bold pr-3'>Class:</Label>\n                            <Input type=\"select\" name=\"selectedClass\" value={ResultGenData.selectedClass} onChange={handleChange} >\n                                {\n                                    ResultGenData.class.map((item, index) =>\n                                        < option key={index} > {item.class_name}</option>\n                                    )\n                                }\n                            </Input>\n                        </FormGroup>\n\n                    </Form >\n                    <div className='d-flex justify-content-lg-center '>\n                        {/* using this button to test CONTEXT API */}\n                        <Button className='text-light font-weight-bold pr-3'\n                            color='success'\n                            onClick={onSubmit}>Submit</Button>\n                    </div>\n                </Card >\n            </div>\n        </div >\n    )\n}\n\nexport default ResultsGenerator\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/subjects/ManageSubject.js",["177"],"import React, { useState, useEffect } from 'react';\nimport { Card, Form, Label, Input, Button, FormGroup } from 'reactstrap';\nimport { dbServices } from '../../services/services';\n\nimport SubjectTable from './SubjectTable';\n\n\n\nfunction ManageSubject(props) {\n    const className = props.match.params.ClassRoomName.toLocaleLowerCase()\n    console.log(className)\n    const [AllmySubjects, setAllmySubjects] = useState([])\n    const [mySubjects, setmySubjects] = useState({ subjectName: '', teacherName: '', })\n\n    useEffect(() => {\n        //fetch subjects and display in table\n        dbServices.getSubjects(className, setAllmySubjects, AllmySubjects);\n    }, [])\n\n\n\n    const changeHandler = (e) => {\n        const value = e.target.value;\n        const upperCaseValue = value.toLocaleUpperCase()\n        setmySubjects({\n            ...mySubjects,\n            [e.target.name]: upperCaseValue\n        })\n\n    }\n    const AddmySubjectsHandler = () => {\n        if (mySubjects.subjectName === '' | mySubjects.teacherName === '') {\n            alert(`\"Subject Name\" or \"Teacher's Name\" cannot be empty `)\n        }\n        else {\n\n            let checkConflictArray = AllmySubjects.filter(Class => Class.subjectName === mySubjects.subjectName)\n\n            if (checkConflictArray.length === 0) {\n                setAllmySubjects(AllmySubjects.concat(mySubjects))\n            }\n            else {\n                console.log({ checkConflictArray })\n                alert(`${mySubjects.subjectName} already added`)\n            }\n        }\n    }\n\n\n\n    return (\n        <div className='d-flex flex-row' >\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >{className.toLocaleUpperCase()}</h4>\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >Register Subject(s) Below</h4>\n                <Card className='container shadow-lg p-3 mb-5 d-flex'>\n                    <Form className='d-flex   flex-column '>\n                        <FormGroup className='d-flex flex-row mr-0 justify-content-start'>\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Subject Name:</Label>\n                            <Input type=\"text\" name=\"subjectName\" value={mySubjects.subjectName} onChange={changeHandler} placeholder=\"e.g: Mathematics, English language \" />\n                        </FormGroup >\n                        <FormGroup className='d-flex flex-row ' >\n                            <Label for=\"username\" className='font-weight-bold w-25 text-success'>Teacher's Name:</Label>\n                            <Input type=\"text\" name=\"teacherName\" value={mySubjects.teacherName} onChange={changeHandler} placeholder=\"e.g Ustaz Zulqarnain\" />\n                        </FormGroup>\n                    </Form>\n                    <div className='d-flex align-self-center justify-content-lg-center '>\n                        <Button className='text-light font-weight-bold'\n                            color='success'\n                            onClick={AddmySubjectsHandler}>Add Subjects</Button>\n                    </div>\n                </Card>\n                <SubjectTable AllmySubjects={AllmySubjects} setAllmySubjects={setAllmySubjects} className={className} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default ManageSubject\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/AllClasses.js",["178"],"import React, { useEffect, useState } from 'react'\n// import db from '../../db'\n\n\nimport CardList from '../cards/CardList'\nimport AddingCard from '../cards/AddingCard'\nimport AddingMoreCard from '../cards/AddingMoreCard';\n\nimport { dbServices } from '../../services/services'\n\n\nfunction AllClasses(props) {\n    /**\n     * 1.   useEffect = fetch all class category and keep in useState = Classes \n     * 2.   if Classes.length === 0 ? display addClasses component\n     * 3.   if Classes.length !== 0 ? display ClassesList components\n     * 4.   if any card in ClassesList component is clicked? window.location = '/allClass' with props of ClassesId\n     *  */\n\n    const [Classes, setClasses] = useState([])\n    let sectionName = props.match.params.sectionname\n\n\n    //* 1.   useEffect = fetch all class category\n    useEffect(() => {\n        //fetch All classes\n        dbServices.fetchAllClasses(sectionName, setClasses, Classes)\n    }, [])\n    return (\n        <div>\n\n            <div className='container d-flex justify-content-center align-items-center flex-column '>\n\n                <h4 className='justify-self-center text-center text-danger mt-4 font-weight-bold' >{sectionName.toLocaleUpperCase()} SECTION</h4>\n                {\n                    Classes.length === 0 ?\n                        <div>\n                            <h4 className='text-success text-center mb-3 font-weight-bold'>\n                                <em>\n                                    SORRY YOU HAVE NO CLASSES AVAILABLE IN THIS SECTION. <br />PLEASE CLICK THE BUTTON BELOW TO ADD CLASS TO THIS SECTION\n                                </em>\n                            </h4>\n                            <AddingCard sectionName={sectionName} addtype='class' />\n                        </div>\n                        :\n                        // Classes.length === 0 ?\n                        //     <Loading />\n                        //     :\n                        Classes.length !== 0 &&\n                        <div className='d-flex flex-row flex-wrap'>\n                            <CardList Classes={Classes} />\n                            <AddingMoreCard sectionName={sectionName} addtype='class' />\n                        </div>\n\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default AllClasses\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultsGenerator.js",["179"],"import React, { useEffect, useState } from 'react'\nimport { Card, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\n\n//DATEPICKER AND ITS CSS\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { dbServices } from '../../services/services';\n\n\nfunction ResultsGenerator() {\n\n    const [ResultGenData, setResultGenData] = useState({\n        section: [],\n        selectedSection: '',\n        class: [],\n        noOfClasses: 0,\n        term: 'FIRST TERM',\n        selectedClass: '',\n        session: '',\n        nextTermBeing: new Date()\n    })\n\n    useEffect(() => {\n        let tempClassValue = []\n        dbServices.getResultGeneratorData(ResultGenData, setResultGenData, tempClassValue)\n    }, [])\n\n    const handleChange = (e) => {\n        const value = e.target.value;\n\n        setResultGenData({\n            ...ResultGenData,\n            [e.target.name]: value\n        })\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        const Data = {\n            term: ResultGenData.term,\n            selectedSection: ResultGenData.selectedSection,\n            selectedClass: ResultGenData.selectedClass,\n            nextTermBeing: ResultGenData.nextTermBeing.toDateString()\n        }\n        if (ResultGenData.session === '') {\n            alert(\"'Session' cannot be empty\")\n        }\n        else {\n            //save resultData\n            console.log(Data)\n            dbServices.saveresultData(Data)\n        }\n    }\n\n\n    return (\n        <div>\n\n            <div className='d-flex justify-content-center align-items-center flex-column'>\n\n                <Card className='container border w-50 shadow-lg p-3 d-flex align-items-center'>\n                    <h4 className='text-danger mb-5 text-center font-weight-bold' >                    RESULT GENERATOR</h4>                <Form >\n                        <FormGroup className='d-flex w-100' >\n                            <Label for=\"Class\" className='text-success font-weight-bold pr-3'>Session:</Label>\n                            <Input type=\"select\" name=\"selectedSection\" value={ResultGenData.selectedSection} onChange={handleChange} >\n                                {ResultGenData.section.length > 0 &&\n                                    ResultGenData.section.map((item, index) =>\n                                        < option key={index} > {item.cat_name}</option>\n                                    )\n                                }\n                            </Input>\n                        </FormGroup>\n\n\n\n                        <FormGroup className='d-flex w-100' >\n                            <Label for=\"Class\" className='text-success font-weight-bold pr-3'>Class:</Label>\n                            <Input type=\"select\" name=\"selectedClass\" value={ResultGenData.selectedClass} onChange={handleChange} >\n                                {\n                                    ResultGenData.class.map((item, index) =>\n                                        < option key={index} > {item.class_name}</option>\n                                    )\n                                }\n                            </Input>\n                        </FormGroup>\n                        <FormGroup className='d-flex w-100'>\n                            <Label for=\"Class\" className='text-success font-weight-bold pr-3'>Term</Label>\n                            <Input type=\"select\" name=\"term\" value={ResultGenData.term} onChange={handleChange} >\n                                <option >FIRST TERM</option>\n                                <option >SECOND TERM</option>\n                                <option >THIRD TERM</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup className='d-flex w-100' >\n                            <Label for=\"Session\" className='text-success font-weight-bold pr-3'>Session</Label>\n                            <Input type=\"text\" name=\"session\" value={ResultGenData.session} onChange={handleChange} placeholder=\"e.g 2021/2022\" />\n                        </FormGroup  >\n                        <div className='d-flex w-100 mb-3'>\n                            <Label for=\"Next Term Resumption Date\" className='text-success font-weight-bold pr-3'>Next Term Begin on</Label>\n                            <DatePicker selected={ResultGenData.nextTermBeing} calendarClassName=\"rasta-stripes\" onChange={date => { setResultGenData({ ...ResultGenData, nextTermBeing: date }); }} />\n                        </div>\n                    </Form >\n                    <div className='d-flex justify-content-lg-center '>\n                        {/* using this button to test CONTEXT API */}\n                        <Button className='text-light font-weight-bold pr-3'\n                            color='success'\n                            onClick={onSubmit}>Submit</Button>\n                    </div>\n                </Card >\n            </div>\n        </div >\n    )\n}\n\nexport default ResultsGenerator\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/subjects/SubjectTable.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultClassBased.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/classes/ScoreSheetTables.js",["180","181"],"import React, { useState, useEffect } from \"react\";\nimport Loading from '../reusables/Loading'\nimport { Table, Input, Button } from 'reactstrap';\nimport { dbServices } from \"../../services/services\";\n\nconst ScoreSheetTables = ({ currentSubject, ClassName }) => {\n\n    const [scoreDisplayData, setScore] = useState([])\n    const [textChange, settextChange] = useState(true)\n\n\n    useEffect(() => {\n        let tempData = [];\n        dbServices.fetchScoreData(ClassName, currentSubject, setScore, tempData)\n    }, [currentSubject])\n\n    const changeHandler = async (e) => {\n        let value = parseInt(e.target.value, 10) || 0;  //assign an integer to value OR 0 if NaN\n        let currentIndex = parseInt(e.target.id, 10) //assign an integer to value OR 0 if NaN\n        console.log(currentIndex)\n        console.log(scoreDisplayData)\n        let tempStateData = scoreDisplayData //Create a dummy array variable to hold scoreDisplayData \n\n        tempStateData[currentIndex][e.target.name] = value //NB: scoreDisplayData  === [{ fName: element.fName, sName: element.sName, Test1: 0, Test2: 0, Exam: 0 }]\n        setScore(tempStateData)\n\n        settextChange(!textChange) //this is use to update state(causes change to DOM) so a re-render occur\n    }\n\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        if (scoreDisplayData.length === 0) {\n            alert(`Atleast 1 'Student's Score' must be must added`)\n        }\n\n        //If score is not enter for any student\n        else if (scoreDisplayData.length !== 0) {\n            let checkifAllScoreFieldArray = scoreDisplayData.filter(\n                // To check a key is available in an object === obj.hasOwnProperty(\"key\")\n                (element) => !element.hasOwnProperty(\"Test1\") || !element.hasOwnProperty(\"Test2\") || !element.hasOwnProperty(\"Exam\") || !element.hasOwnProperty(\"BForward\")\n            )\n            console.log(checkifAllScoreFieldArray)\n\n            if (checkifAllScoreFieldArray.length > 0) {\n                alert(\"'Test 1', Test 2' or 'Exam' or 'Total B/Forward'\" + 'for ' + checkifAllScoreFieldArray[0].fName + \" \" + checkifAllScoreFieldArray[0].sName + ' cannot be empty')\n            }\n            else {\n                //save scoreSheet to DB\n                dbServices.saveScoreSheet(ClassName, currentSubject, scoreDisplayData, settextChange, textChange)\n            }\n\n        }\n\n\n    }\n    return (\n        <div className='d-flex justify-content-center align-items-center flex-column '>\n\n            {scoreDisplayData.length === 0 ?\n                <div></div>\n                :\n                scoreDisplayData === undefined ?\n                    <Loading /> :\n\n                    <div >\n\n                        <Table className='text-success' bordered hover striped>\n                            <thead>\n                                <tr>\n                                    <th>STUDENT NAME </th>\n                                    <th>TEST 1</th>\n                                    <th>TEST 2</th>\n                                    <th>EXAM</th>\n                                    <th>TOTAL B/FORWARD</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {\n                                    scoreDisplayData.length !== 0 &&\n                                    scoreDisplayData.map((scoreToDisplay, index) => {\n\n                                        return (\n                                            < tr key={index}>\n                                                <td>{scoreToDisplay.fName} {scoreToDisplay.sName}</td>\n                                                <td>\n                                                    <Input type=\"number\" id={index} name=\"Test1\" value={scoreToDisplay.Test1} onChange={changeHandler} placeholder=\"TEST 1 SCORE\" />\n                                                </td>\n\n                                                <td>\n                                                    <Input type=\"number\" id={index} name=\"Test2\" value={scoreToDisplay.Test2} onChange={changeHandler} placeholder=\"TEST 2 SCORE\" />\n                                                </td>\n                                                <td>\n                                                    <Input type=\"number\" id={index} name=\"Exam\" value={scoreToDisplay.Exam} onChange={changeHandler} placeholder=\"EXAM SCORE\" />\n                                                </td>\n                                                <td>\n                                                    <Input type=\"number\" id={index} name=\"BForward\" value={scoreToDisplay.BForward} onChange={changeHandler} placeholder=\"TOTAL B/FORWARD\" />\n                                                </td>\n                                            </tr>\n                                        )\n                                    })}\n                            </tbody>\n                        </Table >\n                        <div className='d-flex align-self-center justify-content-lg-center '>\n                            <Button className='text-light font-weight-bold'\n                                color='success'\n                                onClick={onSubmit}>Save Score Data</Button>\n                        </div>\n                    </div>\n            }\n        </div >\n\n\n    );\n};\n\nexport default ScoreSheetTables;","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/AddingCard.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/services.js",["182"],"import db from '../db'\n\nexport const dbServices = {\n    //FETCH OR GET REQUESTS\n    getResultData: (setCurrentData, setScore, setStudent, setSubjects, setSection) => {\n\n        db.get('resultData')\n            .then(result => {\n                if (result) {\n                    //is resultData available in db store it in State\n                    setCurrentData(result.resultData)\n                    //fetch classroom Data from db and save in State\n                    db.get(result.resultData.selectedClass.toLocaleLowerCase()) // e.g nursery 1 === result.resultData.selectedClass.toLocaleLowerCase()\n                        .then(res => {\n                            console.log(res)\n                            // result === {subjects: Array(3), students: Array(2), scores: result.scores, _id: \"basic 1\", _rev: \"11-65f4389ac05f9a59a734892a9aff5b10\"}\n                            setScore(res.scores);\n                            //      scores: {\n                            //     eng: [{ fName, sName, Test1, Test2, Exam }]\n                            //     math:[{fName,sName,Test1,Test2,Exam}]\n                            // }\n                            setStudent(res.students);\n                            // students: Array(3) i.e students = [{fName,sName,gender}]\n                            setSubjects(res.subjects)\n                            // subjects: Array(3) i.e subjects = [{subjectName:\"ENGLISH STUDIES\", teacherName:\"MRS. HAFSOH\"}, eng}]\n                        })\n                }\n            })\n            .catch(err => console.log(err))\n    },\n\n    getResultGeneratorData: (ResultGenData, setResultGenData, tempClassValue) => {\n        db.get('Section')\n            .then(result => {\n                console.log(result.category)\n                setResultGenData({ ...ResultGenData, noOfClasses: result.category.length })\n                result.category.forEach((element, index, array) => {\n                    db.get(element.cat_name.toLocaleLowerCase(),\n                        (err, res) => {\n                            if (res) {\n                                console.log(res)\n                                tempClassValue = tempClassValue.concat(res.Classes)\n                                setResultGenData({ ...ResultGenData, noOfClasses: index + 1, class: tempClassValue, selectedClass: tempClassValue[0].class_name, section: array, selectedSection: array[0].cat_name })\n\n                            }\n                            if (err) {\n                                return (err)\n                            }\n\n                        }\n                    )\n\n                })\n\n            })\n    },\n\n    getSubjects: (className, setAllmySubjects, AllmySubjects) => {\n        db.get(className)\n            .then(result => {\n                if (result.subjects)\n                    setAllmySubjects(AllmySubjects.concat(result.subjects))\n            })\n            .catch(err => {\n                if (err) {\n                    console.log(err)\n                }\n            })\n    },\n\n    getStudentsAndScore: (ClassName, setAllmyStudent, AllmyStudent, setScore) => {\n        db.get(ClassName)\n            .then(result => {\n                if (result.students) {\n                    setAllmyStudent(AllmyStudent.concat(result.students))\n                }\n                if (result.scores) {\n                    setScore(result.scores)\n                }\n            })\n            .catch(err => {\n                if (err) {\n                    setAllmyStudent([])\n                }\n            })\n    },\n\n    fetchAllClasses: (sectionName, setClasses, Classes) => {\n        db.get(sectionName)\n            .then(result => {\n                console.log(result.Classes)\n                setClasses(Classes.concat(result.Classes))\n            })\n            .catch(err => {\n                if (err) {\n                    console.log({ afterError: Classes })\n                    setClasses([])\n                    console.log(err)\n                }\n            })\n    },\n\n    fetchAllSections: (setClassSection, ClassSection) => {\n        db.get('Section')\n            .then(result => {\n                console.log(result.category)\n                setClassSection(ClassSection.concat(result.category))\n            })\n            .catch(err => {\n                if (err) {\n                    setClassSection([])\n                    console.log(err)\n                    console.log({ afterError: ClassSection })\n                }\n            })\n    },\n\n    fetchStudentsAndSubjectsAnsScores: (ClassName, setstudents, setAllSubject, setScore, allSubjects) => {\n        db.get(ClassName)\n            .then(result => {\n                if (result.students)\n                    setstudents(result.students)\n                if (result.subjects) {\n\n                    setAllSubject({ ...allSubjects, subjects: result.subjects, currentSubject: result.subjects[0].subjectName, })\n                }\n                if (result.scores) {\n                    setScore({ scores: result.scores[allSubjects.currentSubject] })\n                }\n\n            })\n            .catch(err => {\n                if (err) {\n                    console.log(err)\n                }\n            })\n    },\n\n    fetchScoreData: (ClassName, currentSubject, setScore, tempData) => {\n        db.get(ClassName)\n            .then(result => {\n                console.log(result)\n                if (currentSubject) {\n                    //CURRENT SUBJECT IS NOT EMPTY\n                    console.log(currentSubject)\n                    if (result.scores[currentSubject]) {\n                        //IF THERE IS SCORE FOR THAT CURRENT SUBJECT\n                        if (result.students.length > result.scores[currentSubject].length) {\n                            //IF NUMBER OF STUDENTS IS INCREASED UNDER MANAGEMENT STUDENT PAGE ADD THE NEW STUDENTS TO THE LIST OF scoreToDisplay\n                            console.log(\"scores available for this subject\")\n                            setScore(result.scores[currentSubject].concat(result.students.slice(result.scores[currentSubject].length)))\n                        }\n                        if (result.scores[currentSubject].length === result.students.length) {\n                            //IF NO ADDITIONAL STUDENTS THEN DISPLAY DB DATA FOR CURRENT SUBJECT\n                            setScore(result.scores[currentSubject])\n                        }\n                    }\n                    else if (!result.scores[currentSubject]) {\n                        //IF SCORES DOES NOT EXIST IN DB (FIRST INSTANCE) FOR CURRENT SUBJECT THEN CREATE THE LIST BELOW BASE ON STUDENTS IN DB ALREADY\n                        result.students.forEach((element, index) => {\n                            tempData = tempData.concat({ fName: element.fName, sName: element.sName, Test1: 0, Test2: 0, Exam: 0, BForward: 0 })\n                        })\n                        setScore(tempData)\n                    }\n                }\n                if (!result.scores) {\n                    //IF SCORES DOES NOT EXIST AT ALL IN DB (FIRST INSTANCE) THEN CREATE THE LIST BELOW BASE ON STUDENTS IN DB ALREADY\n                    result.students.forEach((element, index) => {\n                        tempData = tempData.concat({ fName: element.fName, sName: element.sName, Test1: 0, Test2: 0, Exam: 0, BForward: 0 })\n                    })\n                    setScore(tempData)\n                }\n            }).catch(err => {\n                if (err) {\n                    console.log(err)\n                }\n            })\n    },\n\n    changePasswordinDb: (profile) => {\n        db.get('userId')\n            .then(doc => {\n                db.put({\n                    _id: 'userId',\n                    _rev: doc._rev,\n                    username: doc.username,\n                    password: profile.password\n                }).then(result => {\n                    alert(\"Password Successfully Changed\")\n                    window.location = '/'\n                    console.log(result)\n                })\n                    .catch(function (err) {\n                        console.log(err)\n                    })\n            }).catch(getResultError => {\n                console.log(\"getResult Error: \" + getResultError)\n            })\n    },\n\n    initalizeAdminCredentials: () => {\n        db.get('userId')\n            .then(doc => {\n                db.put({\n                    _id: 'userId',\n                    _rev: doc._rev,\n                    username: doc.username,\n                    password: doc.password\n                }).then(result => { console.log(result) })\n                    .catch(function (err) {\n                        console.log(err)\n                    })\n            }).catch(getResultError => {\n                if (getResultError)\n                    db.put({\n                        _id: 'userId',\n                        username: 'admin',\n                        password: 'admin'\n                    }).then(result => { console.log(result) })\n                        .catch(function (err) {\n                            console.log(err)\n                        })\n            })\n\n    },\n\n    authenticateAdmin: (profile) => {\n        db.get('userId').\n            then(result => {\n                console.log(result)\n                if (profile.username === result.username & profile.password === result.password) {\n                    window.location = '/allclassSection'\n                }\n                else {\n                    alert('Wrong username or Passsword')\n                }\n            }).catch(function (err) {\n                console.log(err)\n            });\n\n    },\n\n    //API POST REQUESTS\n    saveScoreSheet: (ClassName, currentSubject, scoreDisplayData, settextChange, textChange) => {\n        db.get(ClassName)\n            .then(doc => {\n                db.put({\n                    _id: doc._id,\n                    _rev: doc._rev,\n                    subjects: doc.subjects,\n                    students: doc.students,\n                    scores: {\n                        ...doc.scores,\n                        [currentSubject]: scoreDisplayData\n                    }\n                }).then(result => {\n                    if (result) {\n                        settextChange(!textChange) //this is use to only redisplay the screen for the update\n                        alert('Scores Saved Successfully')\n                    }\n                })\n                    .catch(function (err) {\n                        if (err)\n                            console.log('not updated')\n                    });\n            }).catch(err => {\n                if (err)\n                    db.put({\n                        _id: ClassName,\n                        scores: {\n                            [currentSubject]: scoreDisplayData,\n                        }\n                    }).then(result => {\n                        if (result) {\n                            settextChange(!textChange)\n                            alert('Scores Saved Successfully')\n                        }\n                    }).catch(function (err) {\n                        if (err)\n                            console.log('not posted');\n                    });\n            })\n    },\n\n    saveClasses: (sectionName, Classes) => {\n        db.get(sectionName)\n            .then(doc => {\n                db.put({\n                    _id: sectionName,\n                    _rev: doc._rev,\n                    Classes: Classes,\n                    no_of_classes: 0\n                }).then(result => {\n                    if (result)\n                        window.location = `/${sectionName}/classes`\n                }).catch(function (err) {\n                    if (err)\n                        console.log('not updated')\n                });\n            }).catch(err => {\n                if (err)\n                    db.put({\n                        _id: sectionName,\n                        Classes: Classes,\n                        no_of_classes: 0\n                    }).then(result => {\n                        if (result)\n                            window.location = `/${sectionName}/classes`\n                    }).catch(function (err) {\n                        if (err)\n                            console.log('not posted');\n                    });\n            })\n    },\n\n    saveAllSection: (ClassSection) => {\n        db.get('Section')\n            .then(doc => {\n                db.put({\n                    _id: 'Section',\n                    _rev: doc._rev,\n                    category: ClassSection,\n                    no_of_classes: 0\n                }).then(result => {\n                    if (result)\n                        window.location = '/allclassSection'\n                }).catch(function (err) {\n                    if (err)\n                        console.log('not updated')\n                });\n            }).catch(err => {\n                if (err)\n                    db.put({\n                        _id: 'Section',\n                        category: ClassSection,\n                        no_of_classes: 0\n                    }).then(result => {\n                        if (result)\n                            window.location = '/allclassSection'\n                    }).catch(function (err) {\n                        if (err)\n                            console.log('not posted');\n                    });\n            })\n    },\n\n    dbUpdateSubject: (className, AllmySubjects) => {\n        db.get(className)\n            .then(doc => {\n                db.put({\n                    _id: className,\n                    _rev: doc._rev,\n                    scores: doc.scores,\n                    students: doc.students,\n                    subjects: AllmySubjects,\n                }).then(result => {\n                    if (result)\n                        console.log(result)\n                    window.location = `/${className}/classroom`\n                }).catch(function (err) {\n                    if (err)\n                        console.log('not updated')\n                });\n            }).catch(err => {\n                if (err)\n                    db.put({\n                        _id: className,\n                        subjects: AllmySubjects,\n                    }).then(result => {\n                        if (result)\n                            console.log(result)\n                        window.location = `/${className}/classroom`\n                    }).catch(function (err) {\n                        if (err)\n                            console.log('not posted');\n                    });\n            })\n    },\n\n    saveStudents: (ClassName, AllmyStudent,) => {\n        db.get(ClassName)\n            .then(doc => {\n                db.put({\n                    _id: ClassName,\n                    _rev: doc._rev,\n                    subjects: doc.subjects,\n                    scores: doc.scores,\n                    students: AllmyStudent\n                }).then(result => {\n                    if (result)\n                        window.location = `/${ClassName}/classroom`\n                }).catch(function (err) {\n                    if (err)\n                        console.log('not updated')\n                });\n            }).catch(err => {\n                if (err)\n                    db.put({\n                        _id: ClassName,\n                        students: AllmyStudent,\n                    }).then(result => {\n                        if (result)\n                            window.location = `/${ClassName}/classroom`\n                    }).catch(function (err) {\n                        if (err)\n                            console.log('not posted');\n                    });\n\n            })\n\n    },\n\n    saveresultData: (Data) => {\n        db.get('resultData')\n            .then(doc => {\n                db.put({\n                    _id: doc._id,\n                    _rev: doc._rev,\n                    resultData: Data\n                }).then(function (response) {\n                    if (response)\n                        window.location = '/results'\n                }).catch(function (err) {\n                    console.log(err)\n                })\n            })\n            .catch(function (err) {\n                if (err) {\n                    db.put({\n                        _id: 'resultData',\n                        resultData: Data,\n                    }).then(result => {\n                        if (result) {\n                            alert('Saved Successfully')\n                            window.location = '/results'\n                        }\n\n                    }).catch(function (err) {\n                        if (err) console.log('not posted');\n                    });\n                }\n            })\n    },\n    //UPDATING DB\n    deleteStudentfromScore: (ClassName, Scores,) => {\n        db.get(ClassName)\n            .then(doc => {\n                db.put({\n                    _id: ClassName,\n                    _rev: doc._rev,\n                    subjects: doc.subjects,\n                    students: doc.students,\n                    scores: Scores\n                }).then(function (response) {\n                    if (response)\n                        console.log(\"Done\")\n                }).catch(function (err) {\n                    console.log(err);\n                })\n            })\n    }\n}\n\n\n\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/CardList.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/AddingMoreCard.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/ManageCard.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/db.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/Results.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/reusables/Loading.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/cards/Card.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultTables.js",["183"],"import React from 'react'\n\n\nexport const Table = {\n    pysochomotorTale: (pysochomotor) => {\n        return (\n            <table id='doubleTable' className='text-success border' >\n                <thead>\n                    <tr>\n                        <th colSpan=\"6\" className='text-center'>1. PSYCHOMOTOR </th>\n                    </tr>\n                    <tr>\n                        <th className='text-center'></th>\n                        <th className='text-center'>5</th>\n                        <th className='text-center'>4</th>\n                        <th className='text-center'>3</th>\n                        <th className='text-center'>2</th>\n                        <th className='text-center'>1</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        pysochomotor.length !== 0 &&\n                        pysochomotor.map((item, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td style={{ width: '250px' }}>{item}</td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table >\n        )\n    },\n    affectiveDomainTable: (pysochomotor) => {\n        return (\n            <table id='doubleTable' className=' text-success border' >\n                < thead >\n                    <tr>\n                        <th colSpan=\"6\" className='text-center'> 2. AFFECTIVE DOMAIN </th>\n                    </tr>\n                    <tr>\n                        <th className='text-center'></th>\n                        <th className='text-center'>5</th>\n                        <th className='text-center'>4</th>\n                        <th className='text-center'>3</th>\n                        <th className='text-center'>2</th>\n                        <th className='text-center'>1</th>\n                    </tr>\n                </thead >\n                <tbody className='w-100'>\n                    {\n                        pysochomotor.length !== 0 &&\n                        pysochomotor.map((item, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td style={{ width: '250px' }} >{item}</td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                    <td ></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table >\n        )\n    },\n    attendanceTable: (attendeance) => {\n        return (\n            <table id='doubleTableminus' className='text-success border ' >\n                <thead>\n                    <tr>\n                        <th colSpan=\"2\" className='text-center'> 3. ATTENDANCE </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        attendeance.length !== 0 &&\n                        attendeance.map((item, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td id='doubleTD'>{item}</td>\n                                    <td id='doubleTD'></td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table >\n        )\n    },\n\n    physicalAndHealth: () => {\n        return (\n            <table id='doubleTablePlus' className='text-success border ' >\n                <thead>\n                    <tr>\n                        <th colSpan=\"4\" className='text-center'> 4. PHYSICAL DEVELOPMENT & HEALTH </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    < tr className='text-center'>\n                        <th colSpan=\"2\" id='doubleTD'>HEALTH</th>\n                        <th colSpan=\"2\" id='doubleTD'>WEIGHT</th>\n                    </tr>\n\n                    < tr className='text-center'>\n                        <td id='quarterTD'>Beginning of Term</td>\n                        <td id='quarterTD'>End of Term</td>\n\n                        <td id='quarterTD'>Beginning of Term</td>\n                        <td id='quarterTD'>End of Term</td>\n                    </tr>\n\n                    < tr className='text-right'>\n                        <td id='quarterTD'>m</td>\n                        <td id='quarterTD'>m</td>\n\n                        <td id='quarterTD'>kg</td>\n                        <td id='quarterTD'>kg</td>\n\n                    </tr>\n\n                </tbody>\n            </table >\n        )\n    },\n    keyToRating: (key) => {\n        return (\n            <table id='rating' className=' text-success border' >\n                < thead >\n                    <tr>\n                        <th colSpan=\"2\" className='text-center'> KEY TO RATING </th>\n                    </tr>\n                </thead >\n                <tbody className='w-100'>\n                    {\n                        key.length !== 0 &&\n                        key.map((item, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td >{item}</td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table >\n        )\n    },\n\n    keyToGrading: (key) => {\n        return (\n            <table id='grading' className=' text-success border' >\n                < thead >\n                    <tr>\n                        <th colSpan=\"2\" className='text-center'> KEY TO GRADING</th>\n                    </tr>\n                </thead >\n                <tbody className='w-100'>\n                    {\n                        key.length !== 0 &&\n                        key.map((item, index) => {\n                            return (\n                                < tr key={index}>\n                                    <td >{item}</td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table >\n        )\n    },\n    performanceTable: (performanceTableLabel, subjects, id, scores, currentData) => {\n        var SumOfFinalPercentage = 0;\n        console.log(subjects.length)\n        return (\n\n            <div style={{ width: '99%' }} >\n                <table id='performanceTABLE' className='text-success text-center w-100 border' >\n                    <thead>\n                        <tr>\n                            <th colSpan={performanceTableLabel.length + 1} className='text-center'> 5. PERFORMANCE IN SUBJECTS (COGNITIVE) </th>\n                        </tr>\n                    </thead>\n\n                    <tbody >\n                        <tr>\n                            <td></td>\n                            {\n                                performanceTableLabel.map((label, labIndex) => {\n                                    return (\n                                        <td key={labIndex}>{label}</td>\n                                    )\n                                })\n                            }\n                        </tr>\n                        {\n                            subjects.length !== 0 &&\n                            subjects.map((subject, subIndex) => {\n                                if (!scores[subject.subjectName][id]) {\n                                    window.location = `/${currentData.selectedClass}/classroom/${subject.subjectName}`\n                                }\n                                else {\n                                    if (!(scores[subject.subjectName][id].hasOwnProperty(\"Test1\")) || !(scores[subject.subjectName][id].hasOwnProperty(\"Test2\")) || !(scores[subject.subjectName][id].hasOwnProperty(\"Exam\"))) {\n                                        alert(\"ERROR OCCURED! Please enter score for all students on every subject score sheet\")\n                                    }\n                                    else {\n                                        let IntparsedExam = parseInt(scores[subject.subjectName][id].Exam, 10) || 0\n                                        let IntparsedTest1 = parseInt(scores[subject.subjectName][id].Test1, 10) || 0\n                                        let IntparsedTest2 = parseInt(scores[subject.subjectName][id].Test2, 10) || 0\n                                        let termTotal = IntparsedTest1 + IntparsedTest2 + IntparsedExam\n                                        let IntparsedBForward = parseInt(scores[subject.subjectName][id].BForward, 10) || 0\n                                        let cumulativeTotal = termTotal + IntparsedBForward\n                                        let finalPercentage = cumulativeTotal / 2\n                                        SumOfFinalPercentage = SumOfFinalPercentage + finalPercentage\n                                        return (\n                                            <tr key={subIndex} >\n                                                <td className='text-left'>{subject.subjectName}</td>\n\n                                                {/* Test 1  */}\n                                                <td>{IntparsedTest1}</td>\n\n                                                {/* Test 2 */}\n                                                <td>{IntparsedTest2}</td>\n\n                                                {/* Exam  */}\n                                                <td>{IntparsedExam}</td>\n\n                                                {/* Term Total  */}\n                                                <td>{termTotal}\n                                                </td>\n\n                                                {/* Total B/Forward  */}\n                                                <td>{IntparsedBForward}\n\n                                                </td>\n                                                {/* Cummulative Total  */}\n                                                <td>{cumulativeTotal}\n                                                </td>\n\n                                                {/* Final %  */}\n                                                <td>{finalPercentage}\n                                                </td>\n\n                                                {/* Grade  */}\n                                                <td>{\n                                                    finalPercentage >= 75 ? (\"A\")\n                                                        :\n                                                        finalPercentage >= 60 & finalPercentage <= 74 ? \"B\"\n                                                            :\n                                                            finalPercentage >= 50 & finalPercentage <= 59 ? \"C\"\n                                                                :\n                                                                \"F\"}\n                                                </td>\n                                                <td></td>\n                                            </tr>\n\n                                        )\n                                    }//end of  else let ....\n\n                                }//End of else if (!(scores[subject.subjectName][id].hasOwnProperty(\"Test1\"))) .....\n                            })\n                        }\n\n\n\n\n\n                    </tbody>\n                </table >\n                <div className='d-flex justify-content-end w-100'>\n                    <div className='text-danger font-weight-bold border border-success text-center' style={{ width: '170px' }}>\n                        {/* NOTE: SumOfFinalPercentage/subjects.length(Number of Subject) gives average */}\n                        AVERAGE: {(SumOfFinalPercentage / subjects.length).toPrecision(4)}%\n                        </div>\n                </div>\n\n\n\n            </div >\n\n\n        )\n    }\n}\n\n    // < div className = 'mt-4 w-100 d-flex flex-row justify-content-between' >\n    //     {/* <Label className='font-weight-bold w-25 text-success'>No. of Distinction: {Distinction}</Label> */ }\n    //     < Label className = 'font-weight-bold w-25 text-success' > No.of Credits: {}</Label>\n    //                 <Label className='font-weight-bold w-25 text-success'>No. of Passes:{ }</Label>\n    //                 <Label className='font-weight-bold w-25 text-success'>No. of Failed:{ }</Label>\n    //             </div >","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/result/ResultData.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/globalStore.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/rootReducer.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/types.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/admin/SignUp.js",["184","185","186","187","188","189"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { globaltore } from '../../AppStore/globalStore';\nimport { dbServices } from '../../services/services';\nimport { singUp } from '../../AppStore/actions/UserActions'\nimport { Link } from 'react-router-dom'\n\nfunction SignUp() {\n    const { state, dispatch } = useContext(globaltore)\n\n\n    const [profile, setProfile] = React.useState({\n        username: '',\n        fullName: '',\n        email: '',\n        password: '',\n        section: '',\n        password: '',\n        confirmPassword: ''\n    })\n    const [Error, setError] = useState()\n    const [Loading, setLoading] = useState()\n\n\n\n    const handleChange = (e) => {\n        const value = e.target.value;\n        setProfile({\n            ...profile,\n            [e.target.name]: value\n        })\n\n\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        if (profile.username === '' || profile.email === '' || profile.password === '' || profile.confirmPassword === '') {\n            alert('username or password cannot be empty')\n        }\n\n        if (profile.password !== profile.confirmPassword) {\n            alert('Password does not match')\n        }\n\n\n        else {\n            //authenticate Admin\n            // dbServices.authenticateAdmin(profile)\n\n\n            //Register User\n            singUp(dispatch, profile.fullName, profile.email, profile.password, profile.section, setError, setLoading)\n        }\n    }\n    return (\n        <div className='d-flex justify-content-center align-items-center flex-column'>\n            <div style={{ marginTop: '-100px' }}></div>\n            <Card className='container w-25 shadow-lg pt-3 d-flex flex-column align-items-center'>\n                <h4 className='text-success font-weight-bold'>Register</h4>\n                <Form >\n                    <FormGroup >\n                        <Label for=\"username\" className='text-success font-weight-bold'>Username</Label>\n                        <Input type=\"text\" name=\"username\" value={profile.username} onChange={handleChange} placeholder=\"username\" />\n                    </FormGroup>\n                    <FormGroup >\n                        <Label for=\"username\" className='text-success font-weight-bold'>Email Address</Label>\n                        <Input type=\"email\" name=\"email\" value={profile.email} onChange={handleChange} placeholder=\"example@gmail.com\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"password\" className='text-success font-weight-bold'>Password</Label>\n                        <Input type=\"password\" name=\"password\" value={profile.password} onChange={handleChange} placeholder=\"xxxxxxx\" />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"password\" className='text-success font-weight-bold'>Confirm password</Label>\n                        <Input type=\"password\" name=\"confirmPassword\" value={profile.confirmPassword} onChange={handleChange} placeholder=\"xxxxxxx\" />\n                    </FormGroup>\n                </Form>\n                <div className='d-flex justify-content-lg-center '>\n                    <Button className='text-light font-weight-bold'\n                        color='success'\n                        onClick={onSubmit}>Register</Button>\n                </div>\n\n\n                <h6 className='mt-3 mb-3'>Already have an account?\n                 <Link to='/'>  Login</Link>\n                </h6>\n\n            </Card >\n        </div>\n    )\n}\n\nexport default SignUp\n","/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/AppStore/actions/UserActions.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/firebase.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/services/firebase/FirebaseConfig.js",[],"/home/abdulhafiz/PROJECTS/REACT_PROJECTS/NEW_AFMUC_HEROKU/client/src/components/LoadScreen.js",[],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":24,"column":8,"nodeType":"196","endLine":24,"endColumn":10,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":1,"column":29,"nodeType":"200","messageId":"201","endLine":1,"endColumn":38},{"ruleId":"198","severity":1,"message":"202","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":20},{"ruleId":"198","severity":1,"message":"203","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":19,"column":8,"nodeType":"196","endLine":19,"endColumn":10,"suggestions":"204"},{"ruleId":"194","severity":1,"message":"205","line":17,"column":8,"nodeType":"196","endLine":17,"endColumn":10,"suggestions":"206"},{"ruleId":"194","severity":1,"message":"207","line":21,"column":8,"nodeType":"196","endLine":21,"endColumn":10,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"209","line":24,"column":8,"nodeType":"196","endLine":24,"endColumn":10,"suggestions":"210"},{"ruleId":"198","severity":1,"message":"211","line":8,"column":27,"nodeType":"200","messageId":"201","endLine":8,"endColumn":40},{"ruleId":"194","severity":1,"message":"212","line":19,"column":8,"nodeType":"196","endLine":19,"endColumn":10,"suggestions":"213"},{"ruleId":"194","severity":1,"message":"214","line":18,"column":8,"nodeType":"196","endLine":18,"endColumn":10,"suggestions":"215"},{"ruleId":"194","severity":1,"message":"205","line":28,"column":8,"nodeType":"196","endLine":28,"endColumn":10,"suggestions":"216"},{"ruleId":"194","severity":1,"message":"212","line":28,"column":8,"nodeType":"196","endLine":28,"endColumn":10,"suggestions":"217"},{"ruleId":"194","severity":1,"message":"218","line":15,"column":8,"nodeType":"196","endLine":15,"endColumn":24,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":46,"column":74,"nodeType":"222","messageId":"223","endLine":46,"endColumn":75},{"ruleId":"224","severity":1,"message":"225","line":228,"column":25,"nodeType":"226","messageId":"227","endLine":228,"endColumn":26,"fix":"228"},{"ruleId":"229","severity":1,"message":"230","line":210,"column":62,"nodeType":"231","messageId":"232","endLine":210,"endColumn":64},{"ruleId":"198","severity":1,"message":"199","line":1,"column":29,"nodeType":"200","messageId":"201","endLine":1,"endColumn":38},{"ruleId":"198","severity":1,"message":"202","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":20},{"ruleId":"198","severity":1,"message":"233","line":9,"column":13,"nodeType":"200","messageId":"201","endLine":9,"endColumn":18},{"ruleId":"234","severity":1,"message":"235","line":18,"column":9,"nodeType":"236","messageId":"237","endLine":18,"endColumn":17},{"ruleId":"198","severity":1,"message":"238","line":21,"column":12,"nodeType":"200","messageId":"201","endLine":21,"endColumn":17},{"ruleId":"198","severity":1,"message":"239","line":22,"column":12,"nodeType":"200","messageId":"201","endLine":22,"endColumn":19},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ClassSection'. Either include it or remove the dependency array.","ArrayExpression",["242"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dbServices' is defined but never used.","'Link' is defined but never used.",["243"],"React Hook useEffect has missing dependencies: 'Classes' and 'sectionName'. Either include them or remove the dependency array.",["244"],"React Hook useEffect has missing dependencies: 'AllmyStudent' and 'ClassName'. Either include them or remove the dependency array.",["245"],"React Hook useEffect has missing dependencies: 'ClassName', 'allSubjects', and 'subjectName'. Either include them or remove the dependency array.",["246"],"'setbtnDisplay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ResultGenData'. Either include it or remove the dependency array.",["247"],"React Hook useEffect has missing dependencies: 'AllmySubjects' and 'className'. Either include them or remove the dependency array.",["248"],["249"],["250"],"React Hook useEffect has a missing dependency: 'ClassName'. Either include it or remove the dependency array.",["251"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"252","text":"253"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'state' is assigned a value but never used.","no-dupe-keys","Duplicate key 'password'.","ObjectExpression","unexpected","'Error' is assigned a value but never used.","'Loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"254","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"257","fix":"267"},{"desc":"263","fix":"268"},{"desc":"269","fix":"270"},[9223,9237],"\n            .","Update the dependencies array to be: [ClassSection]",{"range":"271","text":"272"},{"range":"273","text":"272"},"Update the dependencies array to be: [Classes, sectionName]",{"range":"274","text":"275"},"Update the dependencies array to be: [AllmyStudent, ClassName]",{"range":"276","text":"277"},"Update the dependencies array to be: [ClassName, allSubjects, subjectName]",{"range":"278","text":"279"},"Update the dependencies array to be: [ResultGenData]",{"range":"280","text":"281"},"Update the dependencies array to be: [AllmySubjects, className]",{"range":"282","text":"283"},{"range":"284","text":"275"},{"range":"285","text":"281"},"Update the dependencies array to be: [ClassName, currentSubject]",{"range":"286","text":"287"},[874,876],"[ClassSection]",[491,493],[588,590],"[Classes, sectionName]",[748,750],"[AllmyStudent, ClassName]",[914,916],"[ClassName, allSubjects, subjectName]",[501,503],"[ResultGenData]",[660,662],"[AllmySubjects, className]",[937,939],[756,758],[512,528],"[ClassName, currentSubject]"]